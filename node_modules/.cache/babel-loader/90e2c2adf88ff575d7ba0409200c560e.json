{"ast":null,"code":"import _ from \"lodash\"; // import { useDispatch } from \"react-redux\";\n\nimport jsonPlaceholder from \"../api/jsonplaceholder\";\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  const userIds = _.uniq(_.map(getState().posts, \"userId\"));\n\n  userIds.forEach(id => dispatch(fetchUser(id)));\n}; //Action Creator returning a function using Redux-Thunk\n\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get(\"/posts\");\n  console.log(\"apiresponce==>\", response.data);\n  dispatch({\n    type: \"FETCH_POSTS\",\n    payload: response.data\n  });\n  return response.data;\n};\nexport const fetchUser = id => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n  dispatch({\n    type: \"FETCH_USER\",\n    payload: response.data\n  });\n};\nexport const deleteSet = id => async dispatch => {\n  const response = await jsonPlaceholder.delete(`/posts/${id}`);\n  dispatch({\n    type: \"DELETE_SET_SUCCESS\",\n    payload: response.data\n  });\n  console.log(\"delete\", response);\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteSet: id => dispatch(deleteSet(id))\n});","map":{"version":3,"sources":["/Users/pc/projects/tasker_added/src/actions/action.js"],"names":["_","jsonPlaceholder","fetchPostsAndUsers","dispatch","getState","fetchPosts","userIds","uniq","map","posts","forEach","id","fetchUser","response","get","console","log","data","type","payload","deleteSet","delete","mapDispatchToProps"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd,C,CACA;;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,QAAMD,QAAQ,CAACE,UAAU,EAAX,CAAd;;AAEA,QAAMC,OAAO,GAAGN,CAAC,CAACO,IAAF,CAAOP,CAAC,CAACQ,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAwB,QAAxB,CAAP,CAAhB;;AACAH,EAAAA,OAAO,CAACI,OAAR,CAAiBC,EAAD,IAAQR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAAhC;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMN,UAAU,GAAG,MAAM,MAAOF,QAAP,IAAoB;AAClD,QAAMU,QAAQ,GAAG,MAAMZ,eAAe,CAACa,GAAhB,CAAoB,QAApB,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,QAAQ,CAACI,IAAvC;AAEAd,EAAAA,QAAQ,CAAC;AAAEe,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,OAAO,EAAEN,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACA,SAAOJ,QAAQ,CAACI,IAAhB;AACD,CANM;AAQP,OAAO,MAAML,SAAS,GAAID,EAAD,IAAQ,MAAOR,QAAP,IAAoB;AACnD,QAAMU,QAAQ,GAAG,MAAMZ,eAAe,CAACa,GAAhB,CAAqB,UAASH,EAAG,EAAjC,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AAAEe,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,OAAO,EAAEN,QAAQ,CAACI;AAAxC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMG,SAAS,GAAIT,EAAD,IAAQ,MAAOR,QAAP,IAAoB;AACnD,QAAMU,QAAQ,GAAG,MAAMZ,eAAe,CAACoB,MAAhB,CAAwB,UAASV,EAAG,EAApC,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AAAEe,IAAAA,IAAI,EAAE,oBAAR;AAA8BC,IAAAA,OAAO,EAAEN,QAAQ,CAACI;AAAhD,GAAD,CAAR;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,QAAtB;AACD,CAJM;;AAMP,MAAMS,kBAAkB,GAAInB,QAAD,KAAe;AACxCiB,EAAAA,SAAS,EAAGT,EAAD,IAAQR,QAAQ,CAACiB,SAAS,CAACT,EAAD,CAAV;AADa,CAAf,CAA3B","sourcesContent":["import _ from \"lodash\";\n// import { useDispatch } from \"react-redux\";\nimport jsonPlaceholder from \"../api/jsonplaceholder\";\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  const userIds = _.uniq(_.map(getState().posts, \"userId\"));\n  userIds.forEach((id) => dispatch(fetchUser(id)));\n};\n\n//Action Creator returning a function using Redux-Thunk\nexport const fetchPosts = () => async (dispatch) => {\n  const response = await jsonPlaceholder.get(\"/posts\");\n  console.log(\"apiresponce==>\", response.data);\n\n  dispatch({ type: \"FETCH_POSTS\", payload: response.data });\n  return response.data;\n};\n\nexport const fetchUser = (id) => async (dispatch) => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n  dispatch({ type: \"FETCH_USER\", payload: response.data });\n};\n\nexport const deleteSet = (id) => async (dispatch) => {\n  const response = await jsonPlaceholder.delete(`/posts/${id}`);\n  dispatch({ type: \"DELETE_SET_SUCCESS\", payload: response.data });\n  console.log(\"delete\", response);\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteSet: (id) => dispatch(deleteSet(id)),\n});\n"]},"metadata":{},"sourceType":"module"}